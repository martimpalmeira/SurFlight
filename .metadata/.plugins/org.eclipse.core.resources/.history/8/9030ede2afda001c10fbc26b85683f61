import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

public class Viagem {

	private String data;

	private String origem;

	private String destino;

	private int numMaximoMala;

	private int numMaximoBolsa;

	private int numMaximoMochila;

	private int numMaximoPassageiros;

	private ArrayList<Bagagem> bagagens;

	private ArrayList<Passageiro> passageiros;

	// Construtor
	public Viagem(String data, String origem, String destino, int numMaximoBolsa, int numMaximoMala,
			int numMaximoMochila, int numMaximoPassageiros) {
		this.data = data;
		this.origem = origem;
		this.destino = destino;
		this.numMaximoBolsa = numMaximoBolsa;
		this.numMaximoMala = numMaximoMala;
		this.numMaximoMochila = numMaximoMochila;
		this.numMaximoPassageiros = numMaximoPassageiros;
		passageiros = new ArrayList<Passageiro>();
		bagagens = new ArrayList<Bagagem>();
	}

	public Passageiro cadastrarPassageiro(String cpf, String nome, String passaporte) {
		Passageiro passageiro = new Passageiro();
		passageiro.setCpf(cpf);
		passageiro.setNome(nome);
		passageiro.setPassaporte(passaporte);
		ArrayList<Bagagem> bagagens = new ArrayList<Bagagem>();
		passageiro.setBagagens(bagagens);
		return passageiro;
	}

	// Métodos de validação de cadastro de cada tipo de bagagem
	public boolean podeCadastrarBolsa() {
		int numBolsasCadastradas = 0;
		for (int i = 0; i < bagagens.size(); i++) {
			if (bagagens.get(i) instanceof Bolsa) {
				numBolsasCadastradas++;
			}
		}
		if (numBolsasCadastradas < numMaximoBolsa) {
			return true;
		} else {
			return false;
		}
	}

	public boolean podeCadastrarMala() {
		int numMalasCadastradas = 0;
		for (int i = 0; i < bagagens.size(); i++) {
			if (bagagens.get(i) instanceof Mala) {
				numMalasCadastradas++;
			}
		}
		if (numMalasCadastradas < numMaximoMala) {
			return true;
		} else {
			return false;
		}
	}

	public boolean podeCadastrarMochila() {
		int numMochilasCadastradas = 0;
		for (int i = 0; i < bagagens.size(); i++) {
			if (bagagens.get(i) instanceof Mochila) {
				numMochilasCadastradas++;
			}
		}
		if (numMochilasCadastradas < numMaximoMochila) {
			return true;
		} else {
			return false;
		}
	}

	// Metodo que cadastra Bagagem
	public void validacaoCadastroBagagem(Passageiro passageiro, double numBagDoPassageiro, int i) {
	
		for (int j = 1; j < numBagDoPassageiro + 1;) {

			if (passageiro.podeCadastrarBagagemDoPassageiro()) {

				System.out.println("Cadastrando " + j + "º bagagem do " + i + "º passageiro");

				Bagagem bagagem = null;

				exibir("Informe o número da bagagem que será cadastrada\n(1)bolsa\n(2)mala\n(3)mochila");
				int tipoBagagem = lerInt();

				if (!this.podeCadastrarBolsa() && tipoBagagem == 1) {
					System.out.println("Número de BOLSAS excedido");
				} else if (!this.podeCadastrarMala() && tipoBagagem == 2) {
					System.out.println("Número de MALAS excedido");
				} else if (!this.podeCadastrarMochila() && tipoBagagem == 3) {
					System.out.println("Número de MOCHILAS excedido");
				} else {
					cadastrarBagagem(tipoBagagem, j, bagagem, passageiro);
				}

			} else {
				System.out.println("Número de bagagens por passageiro EXCEDIDO");
				break;
			}
		}
	}

	public void cadastrarPassageiroComBagagem() {

		for (int i = 1; i < this.numMaximoPassageiros + 1; i++) {

			exibir("*** Cadastrando " + i + "º passageiro ***");
			exibir("Digite o cpf do passageiro:");
			String cpf = lerString();
			exibir("Digite o nome do passageiro:");
			String nome = lerString();
			exibir("Digite o passaporte do passageiro:");
			String passaporte = lerString();

			Passageiro passageiro = this.cadastrarPassageiro(cpf, nome, passaporte);

			exibir("Quantas bagagens deseja cadastrar?\n(0)\n(1)\n(2)");
			int numBagDoPassageiro = lerInt();

			this.validacaoCadastroBagagem(passageiro, numBagDoPassageiro, i);
		}
	}

	public void cadastrarBagagem(int tipoBagagem, int j, Bagagem bagagem, Passageiro passageiro) {
		System.out.println("Informe o peso da bagagem");
		double pesoBagagem = lerDouble();

		if (pesoBagagem <= 10) {
			System.out.println("Informe a cor da bagagem");
			String corBagagem = lerString();
			System.out.println("Informe a marca da bagagem");
			String marcaBagagem = lerString();
			if (tipoBagagem == 1 || tipoBagagem == 3) {
				j++;
			}
			if (tipoBagagem == 1) {

				bagagem = new Bolsa(pesoBagagem, corBagagem, marcaBagagem, passageiro);

			} else if (tipoBagagem == 2) {

				System.out.println("Informe a altura da mala(cm): ");
				double altura = lerDouble();
				if (altura <= 55) {
					System.out.println("Informe a largura da mala(cm): ");
					double largura = lerDouble();
					if (largura <= 35) {
						System.out.println("Informe a profundidade da mala(cm): ");
						double profundidade = lerDouble();
						if (profundidade <= 25) {
							bagagem = new Mala(pesoBagagem, corBagagem, marcaBagagem, passageiro, altura, largura,
									profundidade);
							j++;
						} else {
							System.out.println("PROFUNDIDADE da mala ultrapassa tamanho limite");
						}
					} else {
						System.out.println("LARGURA da mala ultrapassa tamanho limite");
					}

				} else {
					System.out.println("ALTURA da mala ultrapassa tamanho limite");
				}

			} else if (tipoBagagem == 3) {

				bagagem = new Mochila(pesoBagagem, corBagagem, marcaBagagem, passageiro);
			}

			passageiro.addBagagem(bagagem);
			this.bagagens.add(bagagem);

		} else {
			System.out.println("Bagagem será despachada");
		}
	}

	// Metodos de Leitura e Exibição
	public String lerString() {
		Scanner sc = new Scanner(System.in);
		return sc.nextLine();
	}

	public int lerInt() {
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		sc.nextLine();
		return num;
	}

	public double lerDouble() {
		Scanner sc = new Scanner(System.in);
		double num = sc.nextDouble();
		sc.nextLine();
		return num;
	}

	public void exibir(String txt) {
		System.out.println(txt);
	}

}
